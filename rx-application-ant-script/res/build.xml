<!--
This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with this library; See http://www.gnu.org/licenses/.
--><project xmlns:bt="antlib:com.braintribe.build.ant.tasks" basedir="." default="install">

	<bt:import artifact="com.braintribe.devrock.ant:common-ant-script#1.0" useCase="DEVROCK"/>

	<property location="src" name="src"/>
	<property location="build" name="build"/>
	<property location="dist" name="dist"/>

	<target name="init" depends="common-init">
		<bt:pom file="pom.xml" id="maven.project"/>
		<bt:dependencies filesetId="compile.fileset" pathId="compile.classpath" useScope="compile">
			<pom refid="maven.project"/>
		</bt:dependencies>
		<bt:dependencies filesetId="runtime.fileset" pathId="runtime.classpath" useScope="runtime" solutionListStringProperty="runtime.solutions">
			<pom refid="maven.project"/>
		</bt:dependencies>
		<property name="versionedName" value="${maven.project.artifactId}-${maven.project.version}"/>
		<if>
			<isset property="maven.project.properties.launchScript"/>
			<then><property name="launchScript" value="${maven.project.properties.launchScript}"/></then>
			<else><property name="launchScript" value="run"/></else>
		</if>
		<!-- Create time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
	</target>

	<target name="compile" depends="init">
		<!-- Compile the java code from ${src} into ${build} -->
		<propertyregex property="pom.project.properties.java.version.normalized" input="${pom.project.properties.java.version}" regexp="(1\.)?(\d+)" select="\2" />
		<javac debug="true" debuglevel="lines,source,vars" encoding="UTF-8" srcdir="${src}" destdir="${build}"
			source="${pom.project.properties.java.version.normalized}"
			target="${pom.project.properties.java.version.normalized}">

			<include name="**/*.java"/>
			<classpath refid="compile.classpath"/>
		</javac>
		<copy todir="${build}">
			<fileset dir="${src}">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>

	<target name="dist" depends="clean, compile, dist-jar-license">
		<bt:dependencies>
			<dependency groupId="hiconic.platform.reflex" artifactId="reflex-app-resources" version="[1.0,1.1)" scope="runtime"
				classifier="resources" type="zip"/>
			<FileSetTarget id="app.fileset" type="resources:zip"/>
		</bt:dependencies>

		<unzip dest="${dist}/application">
			<resources refid="app.fileset"/>
		</unzip>

		<mkdir dir="${dist}/application/lib"/>
		<jar jarfile="${dist}/application/lib/${versionedName}.jar">
			<fileset dir="${build}"/>
		</jar>
		<jar basedir="${src}" jarfile="${dist}/${versionedName}-sources.jar"/>

		<propertyregex property="packagedSolutions" input="${runtime.solutions}" regexp="," replace="&#10;" global="true" />
		<echo message="${maven.project.groupId}:${maven.project.artifactId}#${maven.project.version}&#10;" file="${dist}/application/packaged-solutions.txt"/>
		<echo append="true" message="${packagedSolutions}" file="${dist}/application/packaged-solutions.txt"/>
		<copy todir="${dist}/application/lib">
			<resources refid="runtime.fileset"/>
			<mapper type="flatten"/>
		</copy>

		<fileset id="final-cp" dir="${dist}/application/lib"/>
		<pathconvert property="manifest-cp" refid="final-cp" pathsep=" ">
			<chainedmapper>
				<mapper type="flatten"/>
				<filtermapper>
					<replacestring from=" " to="%20"/>
				</filtermapper>
			</chainedmapper>
		</pathconvert>
		<property name="launch-jar" value="launch-${maven.project.artifactId}.jar"/>
		<jar destfile="${dist}/application/lib/${launch-jar}">
			<manifest>
				<attribute name="Main-Class" value="hiconic.rx.platform.RxPlatform"/>
				<attribute name="Class-Path" value="${manifest-cp}"/>
			</manifest>
		</jar>

		<if>
			<available file="resources" type="dir"/>
			<then>
				<copy todir="${dist}/application" overwrite="true">
					<fileset dir="resources"/>
				</copy>
			</then>
		</if>

		<replace file="${dist}/application/bin/run" token="launch.jar" value="${launch-jar}"/>
		<replace file="${dist}/application/bin/run.bat" token="launch.jar" value="${launch-jar}"/>

		<!-- Generate shell completion script -->
		<property environment="env" />
		<condition property="java.executable" value="${env.JAVA_HOME}${file.separator}bin${file.separator}java" else="java">
			<isset property="env.JAVA_HOME" />
  		</condition>
		<echo message="Reflecting Service Domains to generate completion script for [${launchScript}] with java:&#xa;    ${java.executable}"/>
		<!-- We need to set the newenvironment attribute in order NOT to inherit other env vars when it's executed, especially in CI
		where in alpine image we have java related env vars (e.g. LD_LIBRARY_PATH=/opt/java/jdk8/lib/server:/opt/java/jdk8/lib:/opt/java/jdk8/../lib).
		This is important in CI because we compile with custom java version by setting the java.executable. -->
		<exec executable="${java.executable}" failonerror="true" newenvironment="true">
			<!--  Uncomment if debugging the reflex app is needed
			<arg value="-Xdebug"/>
			<arg value="-Xrunjdwp:transport=dt_socket,address=9000,server=y,suspend=y"/>
			 -->
			<arg value="-jar"/>
			<arg value="${dist}/application/lib/${launch-jar}"/>
			<arg value="reflect-service-domains"/>
			<arg value=":"/>
			<arg value="options"/>
			<arg value="--response"/>
			<arg value="${dist}/service-domains.json"/>
			<arg value="--protocol"/>
			<arg value="none"/>
			<!-- We need to specify at least one env variable to make newenvironment attribute work. -->
			<!-- Luckily, we need the TEMP, otherwise the temp folder is the Windows folder (on Windows). -->
			<env key="TEMP" value="${env.TEMP}"/>
		</exec>
		<echo message="Generating completion script for [${launchScript}]."/>
		<if>
			<os family="windows"/>
			<then>
				<exec executable="cmd" failonerror="true">
					<arg value="/c"/>
					<arg value="hc-build"/>
					<arg value="generate-shell-completion-script"/>
					<arg value="--cliCommand"/>
					<arg value="${launchScript}"/>
					<arg value="--outputFile"/>
					<arg value="${dist}/application/bin/${launchScript}-completion.sh"/>
					<arg value="--serviceDomains"/>
					<arg value="@sds"/>
					<arg value=":sds"/>
					<arg value="from-file"/>
					<arg value="${dist}/service-domains.json"/>
				</exec>
			</then>
			<else>
				<exec executable="/bin/sh" failonerror="true">
					<arg value="-c"/>
					<arg value="hc-build generate-shell-completion-script --cliCommand ${launchScript} --outputFile ${dist}/application/bin/${launchScript}-completion.sh --serviceDomains @sds :sds from-file ${dist}/service-domains.json"/>
				</exec>
			</else>
		</if>

		<chmod file="${dist}/application/bin/*" perm="754"/>
	</target>

	<target name="assemble" depends="dist">
		<zip destfile="${dist}/${versionedName}.zip">
			<zipfileset dir="${dist}/application" filemode="754">
			  <and>
    		   <!--  for performance -->
			   <not><filename name="**/*.jar"/></not>
			   <containsregexp expression="^#!\s*\/bin\/(ba)?sh"/>
			  </and>
			</zipfileset>
			<zipfileset dir="${dist}/application">
				<or>
     			   <!--  for performance -->
     			   <filename name="**/*.jar"/>
   			       <not><containsregexp expression="^#!\s*\/bin\/(ba)?sh"/></not>
				</or>
			</zipfileset>
		</zip>
	</target>

	<target name="install" depends="assemble">
		<bt:install file="${dist}/application/lib/${versionedName}.jar">
			<pom refid="maven.project"/>
			<attach file="dist/${versionedName}.zip" type="application:zip"/>
			<attach file="${dist}/${versionedName}-sources.jar" classifier="sources" />
		</bt:install>
	</target>

</project>
